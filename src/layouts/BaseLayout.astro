import '../styles/globals.css';
import FontOptimizer from '../components/FontOptimizer.astro';
import ClientScripts from '../components/ClientScripts.astro';
import ServiceWorkerRegistration from '../components/ServiceWorkerRegistration.astro';
import PartyTownSetup from '../components/PartyTownSetup.astro';
import PerformanceMonitor from '../components/PerformanceMonitor.astro';
import WebVitalsDebug from '../components/WebVitalsDebug.astro';

// Props da interface
interface Props {
  title: string;
  description: string;
  image?: string;
  canonicalUrl?: string;
  preconnect?: string[];
  preload?: {
    href: string;
    as: string;
    type?: string;
    crossorigin?: boolean;
    fetchpriority?: 'high' | 'low' | 'auto';
  }[];
  fonts?: {
    family: string;
    weights?: number[];
    display?: 'auto' | 'block' | 'swap' | 'fallback' | 'optional';
    preload?: boolean;
    variable?: boolean;
    styles?: ('normal' | 'italic')[];
    fallback?: string;
    unicodeRange?: string;
    fetchpriority?: 'high' | 'low' | 'auto';
  }[];
  scripts?: {
    src: string;
    defer?: boolean;
    async?: boolean;
    type?: string;
    id?: string;
    strategy?: 'afterInteractive' | 'beforeInteractive' | 'lazyOnload';
  }[];
  structuredData?: Record<string, any>;
  enableServiceWorker?: boolean;
  enablePerformanceMonitoring?: boolean;
  enablePartytown?: boolean;
  enableFontOptimization?: boolean;
  enablePreloading?: boolean;
  enableCompression?: boolean;
  enableCriticalCSS?: boolean;
  enableWebVitalsDebug?: boolean;
  webVitalsDebugPosition?: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';
  themeColor?: string;
  lang?: string;
  class?: string;
}

// Valores padrão para props
const {
  title,
  description,
  image = '/og-image.jpg',
  canonicalUrl = Astro.url.href,
  preconnect = [],
  preload = [],
  fonts = [
    {
      family: 'Montserrat',
      weights: [400, 500, 600, 700],
      display: 'swap',
      preload: true,
      styles: ['normal'],
      fetchpriority: 'high'
    },
    {
      family: 'Inter',
      weights: [400, 500],
      display: 'swap',
      preload: false,
      styles: ['normal']
    }
  ],
  scripts = [],
  structuredData,
  enableServiceWorker = import.meta.env.PROD,
  enablePerformanceMonitoring = import.meta.env.PROD,
  enablePartytown = import.meta.env.PROD,
  enableFontOptimization = true,
  enablePreloading = true,
  enableCompression = import.meta.env.PROD,
  enableCriticalCSS = import.meta.env.PROD,
  enableWebVitalsDebug = import.meta.env.DEV,
  webVitalsDebugPosition = 'bottom-right',
  themeColor = '#ff0000',
  lang = 'pt-BR',
  class: className = ''
} = Astro.props;

// Gerar URL absoluta para a imagem
const absoluteImageUrl = new URL(image, Astro.site).toString();

// Gerar dados estruturados para SEO
const defaultStructuredData = {
  '@context': 'https://schema.org',
  '@type': 'WebPage',
  name: title,
  description: description,
  url: canonicalUrl,
  image: absoluteImageUrl
};

// Mesclar dados estruturados padrão com os fornecidos
const finalStructuredData = structuredData 
  ? { ...defaultStructuredData, ...structuredData }
  : defaultStructuredData;

<!DOCTYPE html>
<html lang={lang} class={className}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- SEO básico -->
    <title>{title}</title>
    <meta name="description" content={description} />
    <link rel="canonical" href={canonicalUrl} />
    
    <!-- Favicons -->
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content={themeColor} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonicalUrl} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={absoluteImageUrl} />
    <meta property="og:locale" content={lang} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalUrl} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={absoluteImageUrl} />
    
    <!-- Dados estruturados para SEO -->
    <script type="application/ld+json" set:html={JSON.stringify(finalStructuredData)} />
    
    <!-- Configuração do Partytown para scripts de terceiros -->
    {enablePartytown && (
      <PartyTownSetup 
        forward={['dataLayer.push', 'fbq', 'ga', 'gtag', 'fbq.queue.push', 'ttq.load', 'ttq.page', 'ttq.track']} 
        debug={import.meta.env.DEV}
        loadScriptsOnUserInteraction={true}
        consentRequired={true}
      />
    )}
    
    <!-- Otimização de fontes -->
    {enableFontOptimization && (
      <FontOptimizer 
        fonts={fonts} 
        preloadFonts={enablePreloading} 
        fontDisplay="swap"
        criticalFontSubset={enableCriticalCSS}
      />
    )}
    
    <!-- Scripts do cliente e preloading -->
    <ClientScripts 
      scripts={scripts} 
      preconnect={preconnect} 
      preload={preload}
      dnsPrefetch={[
        'https://www.googletagmanager.com',
        'https://www.google-analytics.com',
        'https://connect.facebook.net'
      ]}
    />
    
    <!-- Registro do Service Worker -->
    {enableServiceWorker && <ServiceWorkerRegistration enableOfflineSupport={true} />}
    
    <!-- Monitoramento de performance -->
    {enablePerformanceMonitoring && <PerformanceMonitor />}
    
    <!-- Slot para meta tags adicionais -->
    <slot name="head" />
    
    <!-- Estilos críticos inline -->
    <style is:global>
      :root {
        --color-primary: #ff0000;
        --color-secondary: #0066cc;
        --color-text: #333333;
        --color-background: #ffffff;
        --font-primary: 'Montserrat', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        --font-secondary: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      }
      
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      
      html {
        scroll-behavior: smooth;
      }
      
      body {
        font-family: var(--font-primary);
        color: var(--color-text);
        background-color: var(--color-background);
        line-height: 1.6;
        overflow-x: hidden;
      }
      
      img {
        max-width: 100%;
        height: auto;
        display: block;
      }
      
      a {
        color: var(--color-primary);
        text-decoration: none;
        transition: color 0.3s ease;
      }
      
      a:hover {
        color: var(--color-secondary);
      }
      
      button {
        cursor: pointer;
        font-family: var(--font-primary);
      }
      
      /* Otimização para evitar CLS */
      .fonts-loading body {
        visibility: visible;
      }
      
      /* Melhorias de acessibilidade */
      @media (prefers-reduced-motion: reduce) {
        * {
          animation-duration: 0.01ms !important;
          animation-iteration-count: 1 !important;
          transition-duration: 0.01ms !important;
          scroll-behavior: auto !important;
        }
      }
    </style>
  </head>
  <body>
    <slot />
    
    <!-- Debug de Web Vitals (apenas em desenvolvimento) -->
    {enableWebVitalsDebug && <WebVitalsDebug position={webVitalsDebugPosition} />}
    
    <!-- Script para melhorar a performance de imagens -->
    <script>
      // Detectar suporte a WebP
      function checkWebpSupport() {
        const canvas = document.createElement('canvas');
        if (canvas.getContext && canvas.getContext('2d')) {
          return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
        }
        return false;
      }
      
      // Adicionar classe ao HTML com base no suporte a WebP
      if (checkWebpSupport()) {
        document.documentElement.classList.add('webp-support');
      } else {
        document.documentElement.classList.add('no-webp-support');
      }
      
      // Detectar conexão lenta
      if ('connection' in navigator) {
        const conn = navigator.connection;
        if (conn.saveData || conn.effectiveType.includes('2g') || conn.downlink < 0.5) {
          document.documentElement.classList.add('slow-connection');
        }
      }
    </script>
  </body>
</html> 